{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/Status.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialFilters","filterReducer","filters","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","selectedTodo","dispatch","length","className","map","classNames","id","completed","title","onClick","currentTodoActions","selectTodo","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","currentTarget","value","placeholder","style","pointerEvents","trim","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","StatusEnum","getTodos","getUser","userId","Loader","TodoModal","useState","isLoading","setIsLoading","isError","setIsError","selectedUser","setSelectedUser","a","user","useEffect","getUsersFromServer","href","email","name","App","data","todosActions","visibleTodos","useMemo","All","includes","Completed","Active","getTodosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"mOAoBaA,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA4BrCE,EAfY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KACT,QACE,OAAOE,I,OC/BAL,EACD,SAACO,GAAD,MACR,CAAEL,KAAM,eAAgBC,QAASI,IAFxBP,EAIA,SAACQ,GAAD,MACT,CAAEN,KAAM,gBAAiBC,QAASK,IAIhCC,EAAiB,CACrBF,MAAO,GACPC,OAAQ,OAgBKE,EAbO,WAA+C,IAA9CC,EAA6C,uDAAnCF,EAAgBH,EAAmB,uCAClE,OAAQA,EAAOJ,MACb,IAAK,eACH,OAAO,2BAAKS,GAAZ,IAAqBJ,MAAOD,EAAOH,UAErC,IAAK,gBACH,OAAO,2BAAKQ,GAAZ,IAAqBH,OAAQF,EAAOH,UAEtC,QACE,OAAOQ,ICnBAX,EACL,SAACY,GAAD,MAA+B,CAAEV,KAAM,OAAQC,QAASS,IAajDC,EAVM,WAEP,IADZD,EACW,uDADK,GAAIN,EACT,uCACX,MAAoB,SAAhBA,EAAOJ,KACFI,EAAOH,QAGTS,GCZHE,EAAcC,0BAAgB,CAClCC,YAAaZ,EACba,OAAQP,EACRE,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,oECfPC,EAAoCC,IACpCC,EAAkDC,I,OCOlDC,EAA4B,SAAC,GAAe,IAAbf,EAAY,EAAZA,MACpCgB,EAAeH,GAAe,SAAApB,GAAK,OAAIA,EAAMW,eAC7Ca,EAAWN,IAKjB,OACE,mCACIX,EAAMkB,OAMJ,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCAEInB,EAAMoB,KAAI,SAAA/B,GAAI,OACZ,qBAEE,UAAQ,OACR8B,UAAWE,IAAW,CACpB,4BAA6BhC,EAAKiC,MAAL,OAAYN,QAAZ,IAAYA,OAAZ,EAAYA,EAAcM,MAJ3D,UAOE,oBAAIH,UAAU,eAAd,SAA8B9B,EAAKiC,KACnC,oBAAIH,UAAU,eAAd,SACG9B,EAAKkC,WACJ,sBAAMJ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAW9B,EAAKkC,UAAY,mBAC3B,kBADJ,SAGGlC,EAAKmC,UAGV,oBAAIL,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACV7B,KAAK,SACLmC,QAAS,kBA1DZ,SAACpC,GAClB4B,EAASS,EAA2BrC,IAyDDsC,CAAWtC,IAJ5B,SAME,sBAAM8B,UAAU,OAAhB,SACE,mBAAGA,UACD9B,EAAKiC,MAAL,OAAYN,QAAZ,IAAYA,OAAZ,EAAYA,EAAcM,IAAK,aAAe,6BA9BjDjC,EAAKiC,YAzBtB,mBAAGH,UAAU,0BAAb,oEChBKS,EAAuB,WAClC,IAAQjC,EAAUkB,GAAe,SAAApB,GAAK,OAAIA,EAAMY,UAAxCV,MACFsB,EAAWN,IASjB,OACE,uBACEQ,UAAU,mBACVU,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGZ,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBAAQ,UAAQ,eAAea,SAfhB,SAACF,GACtBb,EAASgB,EAAwBH,EAAMI,cAAcC,SAc/C,UACE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGhB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACR7B,KAAK,OACL6B,UAAU,QACViB,YAAY,YACZD,MAAOxC,EACPqC,SA1BY,SAACF,GACnBb,EAASgB,EAAuBH,EAAMI,cAAcC,WA2BhD,sBAAMhB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBkB,MAAO,CAAEC,cAAe,OAAxD,SACG3C,EAAM4C,QACL,wBACE,UAAQ,oBACRjD,KAAK,SACL6B,UAAU,SACVM,QAAS,kBAAMR,EAASgB,EAAuB,iBCtC7D,SAASO,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICnBKC,EDmBCC,EAAW,kBAAMZ,EAAY,WAE7Ba,EAAU,SAACC,GAAD,OAAoBd,EAAG,iBAAiBc,KEpBlDC,G,MAAmB,kBAC9B,qBAAKpC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCENqC,EAAsB,WACjC,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACM7C,EAAeH,GAAe,SAAApB,GAAK,OAAIA,EAAMW,eACnD,EAAwCqD,mBAAsB,MAA9D,mBAAOK,EAAP,KAAqBC,EAArB,KACM9C,EAAWN,IALsB,4CAOvC,4BAAAqD,EAAA,yDACEL,GAAa,GACbE,GAAW,GAFb,SAKyB,OAAjB7C,EALR,gCAMyBqC,EAAQrC,EAAasC,QAN9C,OAMYW,EANZ,OAQMF,EAAgBE,GARtB,yDAWIJ,GAAW,GAXf,yBAaIF,GAAa,GAbjB,8EAPuC,sBAgCvC,OAJAO,qBAAU,YA5B6B,mCA6BrCC,KACC,QAACnD,QAAD,IAACA,OAAD,EAACA,EAAcsC,SAGhB,sBAAKnC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEduC,EAAY,cAAC,EAAD,IAET,sBAAKvC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,UAIIyC,GACA,qDAEG5C,QAFH,IAEGA,OAFH,EAEGA,EAAcM,QAMrB,wBACEhC,KAAK,SACL6B,UAAU,SACV,UAAQ,cACRM,QAjCK,WACjBR,EAASS,WAoCD,qBAAKP,UAAU,kBAAf,SACIyC,EAuBE,mBAAGzC,UAAU,yCAAb,kCAtBF,qCACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGH,QADH,IACGA,OADH,EACGA,EAAcQ,QAGjB,oBAAGL,UAAU,QAAQ,UAAQ,aAA7B,YACG,OAACH,QAAD,IAACA,KAAcO,YACd,wBAAQJ,UAAU,kBAAlB,uBAGA,OAACH,QAAD,IAACA,MAAcO,YACf,wBAAQJ,UAAU,mBAAlB,kBAGD,OACD,mBAAGiD,KAAI,wBAAYN,QAAZ,IAAYA,OAAZ,EAAYA,EAAcO,OAAjC,gBACGP,QADH,IACGA,OADH,EACGA,EAAcQ,uB,SFpFzBnB,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KGYL,IAAMoB,EAAgB,WAC3B,IAAMvE,EAAQa,GAAe,SAAApB,GAAK,OAAIA,EAAMO,SACtCgB,EAAeH,GAAe,SAAApB,GAAK,OAAIA,EAAMW,eACnD,EAA0BS,GAAe,SAAApB,GAAK,OAAIA,EAAMY,UAAhDV,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACTqB,EAAWN,IACjB,EAAkC8C,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KANiC,4CAQjC,4BAAAG,EAAA,6DACEL,GAAa,GACbE,GAAW,GAFb,kBAKuBT,IALvB,OAKUoB,EALV,OAOIvD,EAASwD,EAAkBD,IAP/B,gDASIX,GAAW,GATf,yBAWIF,GAAa,GAXjB,6EARiC,sBAuBjC,IAAMe,EAAeC,mBAAQ,WAC3B,OAAQ/E,GACN,KAAKuD,EAAWyB,IACd,cAAO5E,QAAP,IAAOA,OAAP,EAAOA,EAAOK,QAAO,SAAAhB,GAAI,OAAIA,EAAKmC,MAAMqD,SAASlF,MAEnD,KAAKwD,EAAW2B,UACd,cAAO9E,QAAP,IAAOA,OAAP,EAAOA,EAAOK,QAAO,SAAAhB,GACnB,OAA0B,IAAnBA,EAAKkC,WAAsBlC,EAAKmC,MAAMqD,SAASlF,MAG1D,KAAKwD,EAAW4B,OACd,cAAO/E,QAAP,IAAOA,OAAP,EAAOA,EAAOK,QAAO,SAAAhB,GACnB,OAA0B,IAAnBA,EAAKkC,WAAuBlC,EAAKmC,MAAMqD,SAASlF,MAG3D,QACE,OAAOK,KAEV,CAACL,EAAOC,EAAQI,IAMnB,OAJAkE,qBAAU,YA3CuB,mCA4C/Bc,KACC,IAGD,qCACE,qBAAK7D,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,sBAAKA,UAAU,QAAf,UACGuC,GAAa,cAAC,EAAD,KACZE,IAAYF,GAAa,cAAC,EAAD,CAAU1D,MAAO0E,IAC3Cd,IAAYF,GACX,mBAAGvC,UAAU,yCAAb,4CASTH,GAAgB,cAAC,EAAD,QC5EjBiE,EAAO,kBACX,cAAC,IAAD,CAAU3E,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKN4E,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.8e8f1a95.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type Filter = {\n  type: 'filter/QUERY' | 'filter/STATUS'\n  payload: string;\n};\n\nexport const actions = {\n  setQuery: (query: string): Filter => (\n    { type: 'filter/QUERY', payload: query }\n  ),\n  setStatus: (status: string): Filter => (\n    { type: 'filter/STATUS', payload: status }\n  ),\n};\n\nconst initialFilters = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (filters = initialFilters, action: Filter) => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return { ...filters, query: action.payload };\n\n    case 'filter/STATUS':\n      return { ...filters, status: action.payload };\n\n    default:\n      return filters;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadTodos = {\n  type: 'load';\n  payload: Todo[];\n};\n\ntype Actions = LoadTodos;\n\nexport const actions = {\n  load: (todos: Todo[]): LoadTodos => ({ type: 'load', payload: todos }),\n};\n\nconst todosReducer = (\n  todos: Todo[] = [], action: Actions,\n): Todo[] => {\n  if (action.type === 'load') {\n    return action.payload;\n  }\n\n  return todos;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const selectTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {!todos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {\n                todos.map(todo => (\n                  <tr\n                    key={todo.id}\n                    data-cy=\"todo\"\n                    className={classNames({\n                      'has-background-info-light': todo.id === selectedTodo?.id,\n                    })}\n                  >\n                    <td className=\"is-vcentered\">{todo.id}</td>\n                    <td className=\"is-vcentered\">\n                      {todo.completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={todo.completed ? 'has-text-success'\n                        : 'has-text-danger'}\n                      >\n                        {todo.title}\n                      </p>\n                    </td>\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => selectTodo(todo)}\n                      >\n                        <span className=\"icon\">\n                          <i className={\n                            todo.id !== selectedTodo?.id ? 'far fa-eye' : 'far fa-eye-slash'\n                          }\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                ))\n              }\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n  const handleSelector = (event: React.FormEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.currentTarget.value));\n  };\n\n  const handleInput = (event: React.FormEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.currentTarget.value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleSelector}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query.trim() && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.setQuery(''))}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export type Status = 'all' | 'active' | 'completed';\n\nexport enum StatusEnum {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  async function getUsersFromServer() {\n    setIsLoading(true);\n    setIsError(false);\n\n    try {\n      if (selectedTodo !== null) {\n        const user = await getUser(selectedTodo.userId);\n\n        setSelectedUser(user);\n      }\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const closeModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    getUsersFromServer();\n  }, [selectedTodo?.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {!isError && (\n                  <>\n                    Todo #\n                    {selectedTodo?.id}\n                  </>\n                )}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={closeModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              {!isError ? (\n                <>\n                  <p className=\"block\" data-cy=\"modal-title\">\n                    {selectedTodo?.title}\n                  </p>\n\n                  <p className=\"block\" data-cy=\"modal-user\">\n                    {!selectedTodo?.completed && (\n                      <strong className=\"has-text-danger\">Planned</strong>\n                    )}\n\n                    {!!selectedTodo?.completed && (\n                      <strong className=\"has-text-success\">Done</strong>\n                    )}\n\n                    {' by '}\n                    <a href={`mailto:${selectedUser?.email}`}>\n                      {selectedUser?.name}\n                    </a>\n                  </p>\n                </>\n              )\n                : (\n                  <p className=\"has-text-danger has-text-weight-medium\">\n                    Something went wrong\n                  </p>\n                )}\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { StatusEnum } from './types/Status';\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  async function getTodosFromServer() {\n    setIsLoading(true);\n    setIsError(false);\n\n    try {\n      const data = await getTodos();\n\n      dispatch(todosActions.load(data));\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const visibleTodos = useMemo(() => {\n    switch (status) {\n      case StatusEnum.All:\n        return todos?.filter(todo => todo.title.includes(query));\n\n      case StatusEnum.Completed:\n        return todos?.filter(todo => {\n          return todo.completed === true && todo.title.includes(query);\n        });\n\n      case StatusEnum.Active:\n        return todos?.filter(todo => {\n          return todo.completed === false && todo.title.includes(query);\n        });\n\n      default:\n        return todos;\n    }\n  }, [query, status, todos]);\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {!isError && !isLoading && <TodoList todos={visibleTodos} />}\n              {isError && !isLoading && (\n                <p className=\"has-text-danger has-text-weight-medium\">\n                  Something went wrong\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}